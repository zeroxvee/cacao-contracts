{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Cacao.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./IDelegationRegistry.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*TODO:  1. Write funciton that recevies info out of contract to invoke delegateForToken\n *       2. keep all the active offers that are being delegated\n *       3. make all the functions requirements that keep ETH, track time\n *       4. If delegation was stopped by the Lender, then ETH returned to the borrower\n *       5. after delegation time has passed, Lender can withdraw his 90%, 10% will stay or transfered to Cacao.\n *       6. Implement Royalties so NFT authors also benefit from every rent.\n *\n */\nerror Cacao__WrongIdNumber();\nerror Cacao__NotEnoughFunds();\nerror Cacao__TransferFailed();\n\ncontract Cacao is Ownable {\n    enum OfferStatus {\n        NOT_INITIATED,\n        AVALIABLE,\n        EXECUTED,\n        CANCELED,\n        COMPLETED\n    }\n\n    IDelegationRegistry public delegationRegistry;\n    uint256 public offerCounter;\n    uint256 public fee;\n\n    // Offers object\n    struct Offer {\n        uint256 offerId;\n        uint256 tokenId;\n        uint256 price;\n        uint256 duration;\n        address collection;\n        address lender;\n        address borrower;\n        OfferStatus status;\n    }\n\n    // array of all offers on the marketplace\n    Offer[] public offers;\n\n    // delegations\n    // mapping(address => mapping ()=> uint256)) public offers;\n    mapping(address => Offer[]) offersByLender;\n\n    mapping(address => uint256) balances;\n\n    event OfferCreated(\n        uint256 price,\n        uint256 tokenId,\n        address collection,\n        uint256 duration,\n        address lender\n    );\n\n    event DelegateForToken(\n        address vault,\n        address delegate,\n        address contract_,\n        uint256 tokenId,\n        bool value\n    );\n\n    constructor(address _delegationRegistry) {\n        delegationRegistry = IDelegationRegistry(_delegationRegistry);\n    }\n\n    ////////////////////////*** WRITE *** ///////////////////////\n    /////////////////////////////////////////////////////////////\n\n    function createOffer(\n        uint256 _price,\n        uint256 _tokenId,\n        address _collection,\n        uint256 _duration\n    ) public {\n        Offer memory newOffer = Offer({\n            offerId: offerCounter,\n            tokenId: _tokenId,\n            price: _price,\n            duration: _duration,\n            collection: _collection,\n            lender: msg.sender,\n            borrower: address(0),\n            status: OfferStatus.AVALIABLE\n        });\n        offers.push(newOffer);\n        offersByLender[msg.sender].push(newOffer);\n\n        offerCounter++;\n        emit OfferCreated(_price, _tokenId, _collection, _duration, msg.sender);\n    }\n\n    function cancelOffer(uint256 _offerId) public {\n        offers[_offerId].status = OfferStatus.CANCELED;\n    }\n\n    function delegateForToken(\n        address _delegate,\n        address _contract,\n        uint256 _tokenId,\n        uint256 offerId\n    ) public payable {\n        if (offers[offerId].status != OfferStatus.AVALIABLE) {\n            revert Cacao__WrongIdNumber();\n        }\n        if (offers[offerId].price <= msg.value) {\n            revert Cacao__NotEnoughFunds();\n        }\n        bool value = true;\n        delegationRegistry.delegateForToken(\n            _delegate,\n            _contract,\n            _tokenId,\n            value\n        );\n\n        balances[msg.sender] += msg.value;\n        offers[offerId].status = OfferStatus.EXECUTED;\n        emit DelegateForToken(\n            msg.sender,\n            _delegate,\n            _contract,\n            _tokenId,\n            value\n        );\n    }\n\n    function delegateForAll(address _delegate) public {\n        bool value = true;\n        delegationRegistry.delegateForAll(_delegate, value);\n    }\n\n    function delegateForContract(address _delegate, address _contract) public {\n        bool value = true;\n        delegationRegistry.delegateForContract(_delegate, _contract, value);\n    }\n\n    function revokeDelegate(address _delegate) public {\n        delegationRegistry.revokeDelegate(_delegate);\n    }\n\n    function withdrawFees() public onlyOwner {\n        uint256 balance = balances[address(this)];\n        _withdraw(balance);\n    }\n\n    function withdrawByVault() public {\n        uint256 balance = balances[msg.sender];\n        balances[address(this)] += (balance * fee) / 100;\n        _withdraw(balance);\n    }\n\n    function _withdraw(uint256 balance) internal {\n        balance = address(this).balance;\n        if (balance == 0) {\n            revert Cacao__NotEnoughFunds();\n        }\n        (bool callResult, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!callResult) revert Cacao__TransferFailed();\n    }\n\n    ////////////////////////*** READ *** ///////////////////////\n    ////////////////////////////////////////////////////////////\n\n    function checkDelegateForToken(\n        address _delegate,\n        address _vault,\n        address _contract,\n        uint256 tokenId\n    ) public view returns (bool result) {\n        return\n            result = delegationRegistry.checkDelegateForToken(\n                _delegate,\n                _vault,\n                _contract,\n                tokenId\n            );\n    }\n\n    function getAllOffers() public view returns (Offer[] memory) {\n        return offers;\n    }\n\n    function getOfferByLender(\n        address lender\n    ) public view returns (Offer[] memory) {\n        return offersByLender[lender];\n    }\n}\n"
    },
    "contracts/IDelegationRegistry.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.17;\n\n/**\n * @title An immutable registry contract to be deployed as a standalone primitive\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\n *      from here and integrate those permissions into their flow\n */\ninterface IDelegationRegistry {\n    /// @notice Delegation type\n    enum DelegationType {\n        NONE,\n        ALL,\n        CONTRACT,\n        TOKEN\n    }\n\n    /// @notice Info about a single delegation, used for onchain enumeration\n    struct DelegationInfo {\n        DelegationType type_;\n        address vault;\n        address delegate;\n        address contract_;\n        uint256 tokenId;\n    }\n\n    /// @notice Info about a single contract-level delegation\n    struct ContractDelegation {\n        address contract_;\n        address delegate;\n    }\n\n    /// @notice Info about a single token-level delegation\n    struct TokenDelegation {\n        address contract_;\n        uint256 tokenId;\n        address delegate;\n    }\n\n    /// @notice Emitted when a user delegates their entire wallet\n    event DelegateForAll(address vault, address delegate, bool value);\n\n    /// @notice Emitted when a user delegates a specific contract\n    event DelegateForContract(\n        address vault,\n        address delegate,\n        address contract_,\n        bool value\n    );\n\n    /// @notice Emitted when a user delegates a specific token\n    event DelegateForToken(\n        address vault,\n        address delegate,\n        address contract_,\n        uint256 tokenId,\n        bool value\n    );\n\n    /// @notice Emitted when a user revokes all delegations\n    event RevokeAllDelegates(address vault);\n\n    /// @notice Emitted when a user revoes all delegations for a given delegate\n    event RevokeDelegate(address vault, address delegate);\n\n    /**\n     * -----------  WRITE -----------\n     */\n\n    /**\n     * @notice Allow the delegate to act on your behalf for all contracts\n     * @param delegate The hotwallet to act on your behalf\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForAll(address delegate, bool value) external;\n\n    /**\n     * @notice Allow the delegate to act on your behalf for a specific contract\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForContract(\n        address delegate,\n        address contract_,\n        bool value\n    ) external;\n\n    /**\n     * @notice Allow the delegate to act on your behalf for a specific token\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param tokenId The token id for the token you're delegating\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n     */\n    function delegateForToken(\n        address delegate,\n        address contract_,\n        uint256 tokenId,\n        bool value\n    ) external;\n\n    /**\n     * @notice Revoke all delegates\n     */\n    function revokeAllDelegates() external;\n\n    /**\n     * @notice Revoke a specific delegate for all their permissions\n     * @param delegate The hotwallet to revoke\n     */\n    function revokeDelegate(address delegate) external;\n\n    /**\n     * @notice Remove yourself as a delegate for a specific vault\n     * @param vault The vault which delegated to the msg.sender, and should be removed\n     */\n    function revokeSelf(address vault) external;\n\n    /**\n     * -----------  READ -----------\n     */\n\n    /**\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\n     * @param delegate The delegate that you would like to retrieve delegations for\n     * @return info Array of DelegationInfo structs\n     */\n    function getDelegationsByDelegate(\n        address delegate\n    ) external view returns (DelegationInfo[] memory);\n\n    /**\n     * @notice Returns an array of wallet-level delegates for a given vault\n     * @param vault The cold wallet who issued the delegation\n     * @return addresses Array of wallet-level delegates for a given vault\n     */\n    function getDelegatesForAll(\n        address vault\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns an array of contract-level delegates for a given vault and contract\n     * @param vault The cold wallet who issued the delegation\n     * @param contract_ The address for the contract you're delegating\n     * @return addresses Array of contract-level delegates for a given vault and contract\n     */\n    function getDelegatesForContract(\n        address vault,\n        address contract_\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns an array of contract-level delegates for a given vault's token\n     * @param vault The cold wallet who issued the delegation\n     * @param contract_ The address for the contract holding the token\n     * @param tokenId The token id for the token you're delegating\n     * @return addresses Array of contract-level delegates for a given vault's token\n     */\n    function getDelegatesForToken(\n        address vault,\n        address contract_,\n        uint256 tokenId\n    ) external view returns (address[] memory);\n\n    /**\n     * @notice Returns all contract-level delegations for a given vault\n     * @param vault The cold wallet who issued the delegations\n     * @return delegations Array of ContractDelegation structs\n     */\n    function getContractLevelDelegations(\n        address vault\n    ) external view returns (ContractDelegation[] memory delegations);\n\n    /**\n     * @notice Returns all token-level delegations for a given vault\n     * @param vault The cold wallet who issued the delegations\n     * @return delegations Array of TokenDelegation structs\n     */\n    function getTokenLevelDelegations(\n        address vault\n    ) external view returns (TokenDelegation[] memory delegations);\n\n    /**\n     * @notice Returns true if the address is delegated to act on the entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForAll(\n        address delegate,\n        address vault\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForContract(\n        address delegate,\n        address vault,\n        address contract_\n    ) external view returns (bool);\n\n    /**\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\n     * @param delegate The hotwallet to act on your behalf\n     * @param contract_ The address for the contract you're delegating\n     * @param tokenId The token id for the token you're delegating\n     * @param vault The cold wallet who issued the delegation\n     */\n    function checkDelegateForToken(\n        address delegate,\n        address vault,\n        address contract_,\n        uint256 tokenId\n    ) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}