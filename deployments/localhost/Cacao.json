{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegationRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Cacao__NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cacao__WrongIdNumber",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "DelegateForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "OfferCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkDelegateForToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "delegateForToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegationRegistry",
      "outputs": [
        {
          "internalType": "contract IDelegationRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOffers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "enum Cacao.OfferStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Cacao.Offer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "getOfferByLender",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "enum Cacao.OfferStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Cacao.Offer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "enum Cacao.OfferStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07d8d7f357d7dd78793c55ed3e34ced5e29b43ffaa913fab7a53d3306fd564e3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1318933",
    "logsBloom": "0x
    "blockHash": "0xf5c54fa45792ed2b2b9fa1a5d81d2c7e614d5db2b0f9675a81875612d16f363f",
    "transactionHash": "0x07d8d7f357d7dd78793c55ed3e34ced5e29b43ffaa913fab7a53d3306fd564e3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1318933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "3fa8e75925a1d9942358564a598d5a75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Cacao__NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cacao__WrongIdNumber\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"DelegateForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkDelegateForToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"delegateForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationRegistry\",\"outputs\":[{\"internalType\":\"contract IDelegationRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"enum Cacao.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Cacao.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getOfferByLender\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"enum Cacao.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Cacao.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"enum Cacao.OfferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cacao.sol\":\"Cacao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Cacao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IDelegationRegistry.sol\\\";\\n\\n/*TODO:  1. Write funciton that recevies info out of contract to invoke delegateForToken\\n *       2. keep all the active offers that are being delegated\\n *       3. make all the functions requirements that keep ETH, track time\\n *       4. If delegation was stopped by the Lender, then ETH returned to the borrower\\n *       5. after delegation time has passed, Lender can withdraw his 90%, 10% will stay or transfered to Cacao.\\n *       6.\\n *\\n */\\nerror Cacao__WrongIdNumber();\\nerror Cacao__NotEnoughFunds();\\n\\ncontract Cacao {\\n    enum OfferStatus {\\n        NOT_INITIATED,\\n        AVALIABLE,\\n        EXECUTED,\\n        COMPLETED\\n    }\\n\\n    IDelegationRegistry public delegationRegistry;\\n    uint256 public offerCounter;\\n\\n    // Offers object\\n    struct Offer {\\n        uint256 offerId;\\n        uint256 tokenId;\\n        uint256 price;\\n        uint256 duration;\\n        address collection;\\n        address lender;\\n        address borrower;\\n        OfferStatus status;\\n    }\\n\\n    // array of all offers on the marketplace\\n    Offer[] public offers;\\n\\n    // delegations\\n    // mapping(address => mapping ()=> uint256)) public offers;\\n    mapping(address => Offer[]) offersByLender;\\n\\n    event OfferCreated(\\n        uint256 price,\\n        uint256 tokenId,\\n        address collection,\\n        uint256 duration,\\n        address lender\\n    );\\n\\n    event DelegateForToken(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    );\\n\\n    constructor(address _delegationRegistry) {\\n        delegationRegistry = IDelegationRegistry(_delegationRegistry);\\n    }\\n\\n    // Creates new offer\\n    function createOffer(\\n        uint256 _price,\\n        uint256 _tokenId,\\n        address _collection,\\n        uint256 _duration\\n    ) public {\\n        Offer memory newOffer = Offer({\\n            offerId: offerCounter,\\n            tokenId: _tokenId,\\n            price: _price,\\n            duration: _duration,\\n            collection: _collection,\\n            lender: msg.sender,\\n            borrower: address(0),\\n            status: OfferStatus.AVALIABLE\\n        });\\n        offers.push(newOffer);\\n        offersByLender[msg.sender].push(newOffer);\\n\\n        offerCounter++;\\n        emit OfferCreated(_price, _tokenId, _collection, _duration, msg.sender);\\n    }\\n\\n    function delegateForToken(\\n        address _delegate,\\n        address _contract,\\n        uint256 _tokenId,\\n        uint256 offerId\\n    ) public payable {\\n        if (offers[offerId].status != OfferStatus.AVALIABLE) {\\n            revert Cacao__WrongIdNumber();\\n        }\\n        if (offers[offerId].price <= msg.value) {\\n            revert Cacao__NotEnoughFunds();\\n        }\\n        bool value = true;\\n        delegationRegistry.delegateForToken(\\n            _delegate,\\n            _contract,\\n            _tokenId,\\n            value\\n        );\\n\\n        offers[offerId].status = OfferStatus.EXECUTED;\\n\\n        emit DelegateForToken(\\n            msg.sender,\\n            _delegate,\\n            _contract,\\n            _tokenId,\\n            value\\n        );\\n    }\\n\\n    function checkDelegateForToken(\\n        address _delegate,\\n        address _vault,\\n        address _contract,\\n        uint256 tokenId\\n    ) public view returns (bool result) {\\n        return\\n            result = delegationRegistry.checkDelegateForToken(\\n                _delegate,\\n                _vault,\\n                _contract,\\n                tokenId\\n            );\\n    }\\n\\n    function revokeDelegate(address _delegate) public {\\n        delegationRegistry.revokeDelegate(_delegate);\\n    }\\n\\n    function withdraw() public {}\\n\\n    function getAllOffers() public view returns (Offer[] memory) {\\n        return offers;\\n    }\\n\\n    function getOfferByLender(\\n        address lender\\n    ) public view returns (Offer[] memory) {\\n        return offersByLender[lender];\\n    }\\n}\\n\",\"keccak256\":\"0x1ecba1cc799631cbbbc5452a30277cea000ecb5338f1be8c74ad9e208fbc0c49\",\"license\":\"MIT\"},\"contracts/IDelegationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n *      from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        bool value\\n    );\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    );\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(\\n        address delegate,\\n        address contract_,\\n        bool value\\n    ) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    ) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(\\n        address delegate\\n    ) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(\\n        address vault\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(\\n        address vault,\\n        address contract_\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(\\n        address vault\\n    ) external view returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(\\n        address vault\\n    ) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(\\n        address delegate,\\n        address vault\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(\\n        address delegate,\\n        address vault,\\n        address contract_\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(\\n        address delegate,\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf16594798806700aa5f598bf9e286e61afdb9890eccfd989adae40c570512512\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200179f3803806200179f8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611675806200012a6000396000f3fe6080604052600436106100915760003560e01c8063a165527811610059578063a165527814610161578063aba69cf81461018c578063b7a3c1da146101c9578063c4687b3c146101f4578063fa352c001461023157610091565b80631fbdd72d146100965780633c944e93146100c15780633ccfd60b146100ea578063657bcc98146101015780638a72ea6a1461011d575b600080fd5b3480156100a257600080fd5b506100ab61025a565b6040516100b89190610ecd565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610f61565b61027e565b005b3480156100f657600080fd5b506100ff610665565b005b61011b60048036038101906101169190610fc8565b610667565b005b34801561012957600080fd5b50610144600480360381019061013f919061102f565b61087f565b6040516101589897969594939291906110f1565b60405180910390f35b34801561016d57600080fd5b50610176610944565b60405161018391906112ee565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611310565b610b09565b6040516101c09190611392565b60405180910390f35b3480156101d557600080fd5b506101de610bb6565b6040516101eb91906113ad565b60405180910390f35b34801561020057600080fd5b5061021b600480360381019061021691906113c8565b610bbc565b60405161022891906112ee565b60405180910390f35b34801561023d57600080fd5b50610258600480360381019061025391906113c8565b610dc0565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060405180610100016040528060015481526020018581526020018681526020018381526020018473ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016001600381111561030f5761030e61107a565b5b815250905060028190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff021916908360038111156104685761046761107a565b5b02179055505050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff02191690836003811115610600576105ff61107a565b5b021790555050506001600081548092919061061a90611424565b91905055507f6b040ede0d1cf4747b2a3e20825263e9871ffa9c80a694e62cdce2aa20c06973858585853360405161065695949392919061146c565b60405180910390a15050505050565b565b6001600381111561067b5761067a61107a565b5b6002828154811061068f5761068e6114bf565b5b906000526020600020906007020160060160149054906101000a900460ff1660038111156106c0576106bf61107a565b5b146106f7576040517fed35e89200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346002828154811061070c5761070b6114bf565b5b90600052602060002090600702016002015411610755576040517f7185cbb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663537a5c3d868686856040518563ffffffff1660e01b81526004016107ba94939291906114ee565b600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050506002808381548110610801576108006114bf565b5b906000526020600020906007020160060160146101000a81548160ff021916908360038111156108345761083361107a565b5b02179055507fe89c6ba1e8957285aed22618f52aa1dcb9d5bb64e1533d8b55136c72fcf5aa5d3386868685604051610870959493929190611533565b60405180910390a15050505050565b6002818154811061088f57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff16905088565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610b00578382906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff166003811115610adb57610ada61107a565b5b6003811115610aed57610aec61107a565b5b8152505081526020019060010190610968565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aba69cf8868686866040518563ffffffff1660e01b8152600401610b6b9493929190611586565b602060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906115f7565b9050949350505050565b60015481565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610db5578382906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff166003811115610d9057610d8f61107a565b5b6003811115610da257610da161107a565b5b8152505081526020019060010190610c1d565b505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa352c00826040518263ffffffff1660e01b8152600401610e199190611624565b600060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e93610e8e610e8984610e4e565b610e6e565b610e4e565b9050919050565b6000610ea582610e78565b9050919050565b6000610eb782610e9a565b9050919050565b610ec781610eac565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600080fd5b6000819050919050565b610f0081610eed565b8114610f0b57600080fd5b50565b600081359050610f1d81610ef7565b92915050565b6000610f2e82610e4e565b9050919050565b610f3e81610f23565b8114610f4957600080fd5b50565b600081359050610f5b81610f35565b92915050565b60008060008060808587031215610f7b57610f7a610ee8565b5b6000610f8987828801610f0e565b9450506020610f9a87828801610f0e565b9350506040610fab87828801610f4c565b9250506060610fbc87828801610f0e565b91505092959194509250565b60008060008060808587031215610fe257610fe1610ee8565b5b6000610ff087828801610f4c565b945050602061100187828801610f4c565b935050604061101287828801610f0e565b925050606061102387828801610f0e565b91505092959194509250565b60006020828403121561104557611044610ee8565b5b600061105384828501610f0e565b91505092915050565b61106581610eed565b82525050565b61107481610f23565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106110ba576110b961107a565b5b50565b60008190506110cb826110a9565b919050565b60006110db826110bd565b9050919050565b6110eb816110d0565b82525050565b600061010082019050611107600083018b61105c565b611114602083018a61105c565b611121604083018961105c565b61112e606083018861105c565b61113b608083018761106b565b61114860a083018661106b565b61115560c083018561106b565b61116260e08301846110e2565b9998505050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111a481610eed565b82525050565b6111b381610f23565b82525050565b6111c2816110d0565b82525050565b610100820160008201516111df600085018261119b565b5060208201516111f2602085018261119b565b506040820151611205604085018261119b565b506060820151611218606085018261119b565b50608082015161122b60808501826111aa565b5060a082015161123e60a08501826111aa565b5060c082015161125160c08501826111aa565b5060e082015161126460e08501826111b9565b50505050565b600061127683836111c8565b6101008301905092915050565b6000602082019050919050565b600061129b8261116f565b6112a5818561117a565b93506112b08361118b565b8060005b838110156112e15781516112c8888261126a565b97506112d383611283565b9250506001810190506112b4565b5085935050505092915050565b600060208201905081810360008301526113088184611290565b905092915050565b6000806000806080858703121561132a57611329610ee8565b5b600061133887828801610f4c565b945050602061134987828801610f4c565b935050604061135a87828801610f4c565b925050606061136b87828801610f0e565b91505092959194509250565b60008115159050919050565b61138c81611377565b82525050565b60006020820190506113a76000830184611383565b92915050565b60006020820190506113c2600083018461105c565b92915050565b6000602082840312156113de576113dd610ee8565b5b60006113ec84828501610f4c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142f82610eed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611461576114606113f5565b5b600182019050919050565b600060a082019050611481600083018861105c565b61148e602083018761105c565b61149b604083018661106b565b6114a8606083018561105c565b6114b5608083018461106b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000608082019050611503600083018761106b565b611510602083018661106b565b61151d604083018561105c565b61152a6060830184611383565b95945050505050565b600060a082019050611548600083018861106b565b611555602083018761106b565b611562604083018661106b565b61156f606083018561105c565b61157c6080830184611383565b9695505050505050565b600060808201905061159b600083018761106b565b6115a8602083018661106b565b6115b5604083018561106b565b6115c2606083018461105c565b95945050505050565b6115d481611377565b81146115df57600080fd5b50565b6000815190506115f1816115cb565b92915050565b60006020828403121561160d5761160c610ee8565b5b600061161b848285016115e2565b91505092915050565b6000602082019050611639600083018461106b565b9291505056fea2646970667358221220117e39c48d85c7fbcbfa6d4a660091bad99d5091a867269afc55b9190b9107e064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063a165527811610059578063a165527814610161578063aba69cf81461018c578063b7a3c1da146101c9578063c4687b3c146101f4578063fa352c001461023157610091565b80631fbdd72d146100965780633c944e93146100c15780633ccfd60b146100ea578063657bcc98146101015780638a72ea6a1461011d575b600080fd5b3480156100a257600080fd5b506100ab61025a565b6040516100b89190610ecd565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610f61565b61027e565b005b3480156100f657600080fd5b506100ff610665565b005b61011b60048036038101906101169190610fc8565b610667565b005b34801561012957600080fd5b50610144600480360381019061013f919061102f565b61087f565b6040516101589897969594939291906110f1565b60405180910390f35b34801561016d57600080fd5b50610176610944565b60405161018391906112ee565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190611310565b610b09565b6040516101c09190611392565b60405180910390f35b3480156101d557600080fd5b506101de610bb6565b6040516101eb91906113ad565b60405180910390f35b34801561020057600080fd5b5061021b600480360381019061021691906113c8565b610bbc565b60405161022891906112ee565b60405180910390f35b34801561023d57600080fd5b50610258600480360381019061025391906113c8565b610dc0565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060405180610100016040528060015481526020018581526020018681526020018381526020018473ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016001600381111561030f5761030e61107a565b5b815250905060028190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff021916908360038111156104685761046761107a565b5b02179055505050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060160146101000a81548160ff02191690836003811115610600576105ff61107a565b5b021790555050506001600081548092919061061a90611424565b91905055507f6b040ede0d1cf4747b2a3e20825263e9871ffa9c80a694e62cdce2aa20c06973858585853360405161065695949392919061146c565b60405180910390a15050505050565b565b6001600381111561067b5761067a61107a565b5b6002828154811061068f5761068e6114bf565b5b906000526020600020906007020160060160149054906101000a900460ff1660038111156106c0576106bf61107a565b5b146106f7576040517fed35e89200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346002828154811061070c5761070b6114bf565b5b90600052602060002090600702016002015411610755576040517f7185cbb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663537a5c3d868686856040518563ffffffff1660e01b81526004016107ba94939291906114ee565b600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050506002808381548110610801576108006114bf565b5b906000526020600020906007020160060160146101000a81548160ff021916908360038111156108345761083361107a565b5b02179055507fe89c6ba1e8957285aed22618f52aa1dcb9d5bb64e1533d8b55136c72fcf5aa5d3386868685604051610870959493929190611533565b60405180910390a15050505050565b6002818154811061088f57600080fd5b90600052602060002090600702016000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060160149054906101000a900460ff16905088565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610b00578382906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff166003811115610adb57610ada61107a565b5b6003811115610aed57610aec61107a565b5b8152505081526020019060010190610968565b50505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aba69cf8868686866040518563ffffffff1660e01b8152600401610b6b9493929190611586565b602060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906115f7565b9050949350505050565b60015481565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610db5578382906000526020600020906007020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff166003811115610d9057610d8f61107a565b5b6003811115610da257610da161107a565b5b8152505081526020019060010190610c1d565b505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa352c00826040518263ffffffff1660e01b8152600401610e199190611624565b600060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e93610e8e610e8984610e4e565b610e6e565b610e4e565b9050919050565b6000610ea582610e78565b9050919050565b6000610eb782610e9a565b9050919050565b610ec781610eac565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600080fd5b6000819050919050565b610f0081610eed565b8114610f0b57600080fd5b50565b600081359050610f1d81610ef7565b92915050565b6000610f2e82610e4e565b9050919050565b610f3e81610f23565b8114610f4957600080fd5b50565b600081359050610f5b81610f35565b92915050565b60008060008060808587031215610f7b57610f7a610ee8565b5b6000610f8987828801610f0e565b9450506020610f9a87828801610f0e565b9350506040610fab87828801610f4c565b9250506060610fbc87828801610f0e565b91505092959194509250565b60008060008060808587031215610fe257610fe1610ee8565b5b6000610ff087828801610f4c565b945050602061100187828801610f4c565b935050604061101287828801610f0e565b925050606061102387828801610f0e565b91505092959194509250565b60006020828403121561104557611044610ee8565b5b600061105384828501610f0e565b91505092915050565b61106581610eed565b82525050565b61107481610f23565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106110ba576110b961107a565b5b50565b60008190506110cb826110a9565b919050565b60006110db826110bd565b9050919050565b6110eb816110d0565b82525050565b600061010082019050611107600083018b61105c565b611114602083018a61105c565b611121604083018961105c565b61112e606083018861105c565b61113b608083018761106b565b61114860a083018661106b565b61115560c083018561106b565b61116260e08301846110e2565b9998505050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111a481610eed565b82525050565b6111b381610f23565b82525050565b6111c2816110d0565b82525050565b610100820160008201516111df600085018261119b565b5060208201516111f2602085018261119b565b506040820151611205604085018261119b565b506060820151611218606085018261119b565b50608082015161122b60808501826111aa565b5060a082015161123e60a08501826111aa565b5060c082015161125160c08501826111aa565b5060e082015161126460e08501826111b9565b50505050565b600061127683836111c8565b6101008301905092915050565b6000602082019050919050565b600061129b8261116f565b6112a5818561117a565b93506112b08361118b565b8060005b838110156112e15781516112c8888261126a565b97506112d383611283565b9250506001810190506112b4565b5085935050505092915050565b600060208201905081810360008301526113088184611290565b905092915050565b6000806000806080858703121561132a57611329610ee8565b5b600061133887828801610f4c565b945050602061134987828801610f4c565b935050604061135a87828801610f4c565b925050606061136b87828801610f0e565b91505092959194509250565b60008115159050919050565b61138c81611377565b82525050565b60006020820190506113a76000830184611383565b92915050565b60006020820190506113c2600083018461105c565b92915050565b6000602082840312156113de576113dd610ee8565b5b60006113ec84828501610f4c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142f82610eed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611461576114606113f5565b5b600182019050919050565b600060a082019050611481600083018861105c565b61148e602083018761105c565b61149b604083018661106b565b6114a8606083018561105c565b6114b5608083018461106b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000608082019050611503600083018761106b565b611510602083018661106b565b61151d604083018561105c565b61152a6060830184611383565b95945050505050565b600060a082019050611548600083018861106b565b611555602083018761106b565b611562604083018661106b565b61156f606083018561105c565b61157c6080830184611383565b9695505050505050565b600060808201905061159b600083018761106b565b6115a8602083018661106b565b6115b5604083018561106b565b6115c2606083018461105c565b95945050505050565b6115d481611377565b81146115df57600080fd5b50565b6000815190506115f1816115cb565b92915050565b60006020828403121561160d5761160c610ee8565b5b600061161b848285016115e2565b91505092915050565b6000602082019050611639600083018461106b565b9291505056fea2646970667358221220117e39c48d85c7fbcbfa6d4a660091bad99d5091a867269afc55b9190b9107e064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3348,
        "contract": "contracts/Cacao.sol:Cacao",
        "label": "delegationRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDelegationRegistry)5132"
      },
      {
        "astId": 3350,
        "contract": "contracts/Cacao.sol:Cacao",
        "label": "offerCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3372,
        "contract": "contracts/Cacao.sol:Cacao",
        "label": "offers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Offer)3368_storage)dyn_storage"
      },
      {
        "astId": 3378,
        "contract": "contracts/Cacao.sol:Cacao",
        "label": "offersByLender",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(Offer)3368_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Offer)3368_storage)dyn_storage": {
        "base": "t_struct(Offer)3368_storage",
        "encoding": "dynamic_array",
        "label": "struct Cacao.Offer[]",
        "numberOfBytes": "32"
      },
      "t_contract(IDelegationRegistry)5132": {
        "encoding": "inplace",
        "label": "contract IDelegationRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(OfferStatus)3345": {
        "encoding": "inplace",
        "label": "enum Cacao.OfferStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Offer)3368_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Cacao.Offer[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Offer)3368_storage)dyn_storage"
      },
      "t_struct(Offer)3368_storage": {
        "encoding": "inplace",
        "label": "struct Cacao.Offer",
        "members": [
          {
            "astId": 3352,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "offerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3354,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3356,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3358,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3360,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "collection",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3362,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "lender",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3364,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "borrower",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3367,
            "contract": "contracts/Cacao.sol:Cacao",
            "label": "status",
            "offset": 20,
            "slot": "6",
            "type": "t_enum(OfferStatus)3345"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}