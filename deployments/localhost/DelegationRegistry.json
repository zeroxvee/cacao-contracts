{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "DelegateForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "DelegateForContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "DelegateForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RevokeAllDelegates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "RevokeDelegate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "checkDelegateForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "checkDelegateForContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkDelegateForToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "delegateForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "delegateForContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "delegateForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getContractLevelDelegations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contract_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationRegistry.ContractDelegation[]",
          "name": "contractDelegations",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getDelegatesForAll",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "delegates",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "getDelegatesForContract",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "delegates",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDelegatesForToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "delegates",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "getDelegationsByDelegate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IDelegationRegistry.DelegationType",
              "name": "type_",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contract_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDelegationRegistry.DelegationInfo[]",
          "name": "info",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getTokenLevelDelegations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contract_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationRegistry.TokenDelegation[]",
          "name": "tokenDelegations",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeAllDelegates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "revokeSelf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bfcc008459fddbb6db031fcf266218560a08b909a189eaee328a35cf1a7ea9a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2757475",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb4a164e03db9f5f59c273d13c2badea17a0dd0639b87a8fe64bde8305cd5ffbc",
    "transactionHash": "0x7bfcc008459fddbb6db031fcf266218560a08b909a189eaee328a35cf1a7ea9a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2757475",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3fa8e75925a1d9942358564a598d5a75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"DelegateForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"DelegateForContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"DelegateForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RevokeAllDelegates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"RevokeDelegate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"checkDelegateForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"checkDelegateForContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkDelegateForToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"delegateForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"delegateForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"delegateForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getContractLevelDelegations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationRegistry.ContractDelegation[]\",\"name\":\"contractDelegations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getDelegatesForAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"delegates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"getDelegatesForContract\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"delegates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDelegatesForToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"delegates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"getDelegationsByDelegate\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IDelegationRegistry.DelegationType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct IDelegationRegistry.DelegationInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getTokenLevelDelegations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationRegistry.TokenDelegation[]\",\"name\":\"tokenDelegations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeAllDelegates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"revokeSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:coauthor\":\"foobar (0xfoobar)wwchung (manifoldxyz)purplehat (artblocks)ryley-o (artblocks)andy8052 (tessera)punk6529 (open metaverse)loopify (loopiverse)emiliano (nftrentals)arran (proof)james (collabland)john (gnosis safe)0xrusowsky\",\"custom:version\":\"1.0\",\"details\":\"See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations from here and integrate those permissions into their flow.\",\"kind\":\"dev\",\"methods\":{\"checkDelegateForAll(address,address)\":{\"params\":{\"delegate\":\"The hotwallet to act on your behalf\",\"vault\":\"The cold wallet who issued the delegation\"}},\"checkDelegateForContract(address,address,address)\":{\"params\":{\"contract_\":\"The address for the contract you're delegating\",\"delegate\":\"The hotwallet to act on your behalf\",\"vault\":\"The cold wallet who issued the delegation\"}},\"checkDelegateForToken(address,address,address,uint256)\":{\"params\":{\"contract_\":\"The address for the contract you're delegating\",\"delegate\":\"The hotwallet to act on your behalf\",\"tokenId\":\"The token id for the token you're delegating\",\"vault\":\"The cold wallet who issued the delegation\"}},\"delegateForAll(address,bool)\":{\"params\":{\"delegate\":\"The hotwallet to act on your behalf\",\"value\":\"Whether to enable or disable delegation for this address, true for setting and false for revoking\"}},\"delegateForContract(address,address,bool)\":{\"params\":{\"contract_\":\"The address for the contract you're delegating\",\"delegate\":\"The hotwallet to act on your behalf\",\"value\":\"Whether to enable or disable delegation for this address, true for setting and false for revoking\"}},\"delegateForToken(address,address,uint256,bool)\":{\"params\":{\"contract_\":\"The address for the contract you're delegating\",\"delegate\":\"The hotwallet to act on your behalf\",\"tokenId\":\"The token id for the token you're delegating\",\"value\":\"Whether to enable or disable delegation for this address, true for setting and false for revoking\"}},\"getContractLevelDelegations(address)\":{\"params\":{\"vault\":\"The cold wallet who issued the delegations\"},\"returns\":{\"contractDelegations\":\"Array of ContractDelegation structs\"}},\"getDelegatesForAll(address)\":{\"params\":{\"vault\":\"The cold wallet who issued the delegation\"},\"returns\":{\"delegates\":\"addresses Array of wallet-level delegates for a given vault\"}},\"getDelegatesForContract(address,address)\":{\"params\":{\"contract_\":\"The address for the contract you're delegating\",\"vault\":\"The cold wallet who issued the delegation\"},\"returns\":{\"delegates\":\"addresses Array of contract-level delegates for a given vault and contract\"}},\"getDelegatesForToken(address,address,uint256)\":{\"params\":{\"contract_\":\"The address for the contract holding the token\",\"tokenId\":\"The token id for the token you're delegating\",\"vault\":\"The cold wallet who issued the delegation\"},\"returns\":{\"delegates\":\"addresses Array of contract-level delegates for a given vault's token\"}},\"getDelegationsByDelegate(address)\":{\"params\":{\"delegate\":\"The delegate that you would like to retrieve delegations for\"},\"returns\":{\"info\":\"Array of DelegationInfo structs\"}},\"getTokenLevelDelegations(address)\":{\"params\":{\"vault\":\"The cold wallet who issued the delegations\"},\"returns\":{\"tokenDelegations\":\"Array of TokenDelegation structs\"}},\"revokeDelegate(address)\":{\"params\":{\"delegate\":\"The hotwallet to revoke\"}},\"revokeSelf(address)\":{\"params\":{\"vault\":\"The vault which delegated to the msg.sender, and should be removed\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"delegationHashes\":{\"details\":\"delegate -> delegationHashes\"},\"delegationInfo\":{\"details\":\"delegationHash -> DelegateInfo\"},\"delegations\":{\"details\":\"vault -> vaultVersion -> delegationHash\"}},\"title\":\"DelegationRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"DelegateForAll(address,address,bool)\":{\"notice\":\"Emitted when a user delegates their entire wallet\"},\"DelegateForContract(address,address,address,bool)\":{\"notice\":\"Emitted when a user delegates a specific contract\"},\"DelegateForToken(address,address,address,uint256,bool)\":{\"notice\":\"Emitted when a user delegates a specific token\"},\"RevokeAllDelegates(address)\":{\"notice\":\"Emitted when a user revokes all delegations\"},\"RevokeDelegate(address,address)\":{\"notice\":\"Emitted when a user revoes all delegations for a given delegate\"}},\"kind\":\"user\",\"methods\":{\"checkDelegateForAll(address,address)\":{\"notice\":\"Returns true if the address is delegated to act on the entire vault\"},\"checkDelegateForContract(address,address,address)\":{\"notice\":\"Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\"},\"checkDelegateForToken(address,address,address,uint256)\":{\"notice\":\"Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\"},\"delegateForAll(address,bool)\":{\"notice\":\"Allow the delegate to act on your behalf for all contracts\"},\"delegateForContract(address,address,bool)\":{\"notice\":\"Allow the delegate to act on your behalf for a specific contract\"},\"delegateForToken(address,address,uint256,bool)\":{\"notice\":\"Allow the delegate to act on your behalf for a specific token\"},\"getContractLevelDelegations(address)\":{\"notice\":\"Returns all contract-level delegations for a given vault\"},\"getDelegatesForAll(address)\":{\"notice\":\"Returns an array of wallet-level delegates for a given vault\"},\"getDelegatesForContract(address,address)\":{\"notice\":\"Returns an array of contract-level delegates for a given vault and contract\"},\"getDelegatesForToken(address,address,uint256)\":{\"notice\":\"Returns an array of contract-level delegates for a given vault's token\"},\"getDelegationsByDelegate(address)\":{\"notice\":\"Returns all active delegations a given delegate is able to claim on behalf of\"},\"getTokenLevelDelegations(address)\":{\"notice\":\"Returns all token-level delegations for a given vault\"},\"revokeAllDelegates()\":{\"notice\":\"Revoke all delegates\"},\"revokeDelegate(address)\":{\"notice\":\"Revoke a specific delegate for all their permissions\"},\"revokeSelf(address)\":{\"notice\":\"Remove yourself as a delegate for a specific vault\"}},\"notice\":\"An immutable registry contract to be deployed as a standalone primitive.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Delegator.sol\":\"DelegationRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/Delegator.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\nimport {IDelegationRegistry} from \\\"./IDelegationRegistry.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title DelegationRegistry\\n * @custom:version 1.0\\n * @notice An immutable registry contract to be deployed as a standalone primitive.\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n * from here and integrate those permissions into their flow.\\n * @custom:coauthor foobar (0xfoobar)\\n * @custom:coauthor wwchung (manifoldxyz)\\n * @custom:coauthor purplehat (artblocks)\\n * @custom:coauthor ryley-o (artblocks)\\n * @custom:coauthor andy8052 (tessera)\\n * @custom:coauthor punk6529 (open metaverse)\\n * @custom:coauthor loopify (loopiverse)\\n * @custom:coauthor emiliano (nftrentals)\\n * @custom:coauthor arran (proof)\\n * @custom:coauthor james (collabland)\\n * @custom:coauthor john (gnosis safe)\\n * @custom:coauthor 0xrusowsky\\n */\\ncontract DelegationRegistry is IDelegationRegistry, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /// @notice The global mapping and single source of truth for delegations\\n    /// @dev vault -> vaultVersion -> delegationHash\\n    mapping(address => mapping(uint256 => EnumerableSet.Bytes32Set))\\n        internal delegations;\\n\\n    /// @notice A mapping of wallets to versions (for cheap revocation)\\n    mapping(address => uint256) internal vaultVersion;\\n\\n    /// @notice A mapping of wallets to delegates to versions (for cheap revocation)\\n    mapping(address => mapping(address => uint256)) internal delegateVersion;\\n\\n    /// @notice A secondary mapping to return onchain enumerability of delegations that a given address can perform\\n    /// @dev delegate -> delegationHashes\\n    mapping(address => EnumerableSet.Bytes32Set) internal delegationHashes;\\n\\n    /// @notice A secondary mapping used to return delegation information about a delegation\\n    /// @dev delegationHash -> DelegateInfo\\n    mapping(bytes32 => IDelegationRegistry.DelegationInfo)\\n        internal delegationInfo;\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IDelegationRegistry).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function delegateForAll(address delegate, bool value) external override {\\n        bytes32 delegationHash = _computeAllDelegationHash(\\n            msg.sender,\\n            delegate\\n        );\\n        _setDelegationValues(\\n            delegate,\\n            delegationHash,\\n            value,\\n            IDelegationRegistry.DelegationType.ALL,\\n            msg.sender,\\n            address(0),\\n            0\\n        );\\n        emit IDelegationRegistry.DelegateForAll(msg.sender, delegate, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function delegateForContract(\\n        address delegate,\\n        address contract_,\\n        bool value\\n    ) external override {\\n        bytes32 delegationHash = _computeContractDelegationHash(\\n            msg.sender,\\n            delegate,\\n            contract_\\n        );\\n        _setDelegationValues(\\n            delegate,\\n            delegationHash,\\n            value,\\n            IDelegationRegistry.DelegationType.CONTRACT,\\n            msg.sender,\\n            contract_,\\n            0\\n        );\\n        emit IDelegationRegistry.DelegateForContract(\\n            msg.sender,\\n            delegate,\\n            contract_,\\n            value\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function delegateForToken(\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    ) external override {\\n        bytes32 delegationHash = _computeTokenDelegationHash(\\n            msg.sender,\\n            delegate,\\n            contract_,\\n            tokenId\\n        );\\n        _setDelegationValues(\\n            delegate,\\n            delegationHash,\\n            value,\\n            IDelegationRegistry.DelegationType.TOKEN,\\n            msg.sender,\\n            contract_,\\n            tokenId\\n        );\\n        emit IDelegationRegistry.DelegateForToken(\\n            msg.sender,\\n            delegate,\\n            contract_,\\n            tokenId,\\n            value\\n        );\\n    }\\n\\n    /**\\n     * @dev Helper function to set all delegation values and enumeration sets\\n     */\\n    function _setDelegationValues(\\n        address delegate,\\n        bytes32 delegateHash,\\n        bool value,\\n        IDelegationRegistry.DelegationType type_,\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) internal {\\n        if (value) {\\n            delegations[vault][vaultVersion[vault]].add(delegateHash);\\n            delegationHashes[delegate].add(delegateHash);\\n            delegationInfo[delegateHash] = DelegationInfo({\\n                vault: vault,\\n                delegate: delegate,\\n                type_: type_,\\n                contract_: contract_,\\n                tokenId: tokenId\\n            });\\n        } else {\\n            delegations[vault][vaultVersion[vault]].remove(delegateHash);\\n            delegationHashes[delegate].remove(delegateHash);\\n            delete delegationInfo[delegateHash];\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function to compute delegation hash for wallet delegation\\n     */\\n    function _computeAllDelegationHash(\\n        address vault,\\n        address delegate\\n    ) internal view returns (bytes32) {\\n        uint256 vaultVersion_ = vaultVersion[vault];\\n        uint256 delegateVersion_ = delegateVersion[vault][delegate];\\n        return\\n            keccak256(\\n                abi.encode(delegate, vault, vaultVersion_, delegateVersion_)\\n            );\\n    }\\n\\n    /**\\n     * @dev Helper function to compute delegation hash for contract delegation\\n     */\\n    function _computeContractDelegationHash(\\n        address vault,\\n        address delegate,\\n        address contract_\\n    ) internal view returns (bytes32) {\\n        uint256 vaultVersion_ = vaultVersion[vault];\\n        uint256 delegateVersion_ = delegateVersion[vault][delegate];\\n        return\\n            keccak256(\\n                abi.encode(\\n                    delegate,\\n                    vault,\\n                    contract_,\\n                    vaultVersion_,\\n                    delegateVersion_\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Helper function to compute delegation hash for token delegation\\n     */\\n    function _computeTokenDelegationHash(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId\\n    ) internal view returns (bytes32) {\\n        uint256 vaultVersion_ = vaultVersion[vault];\\n        uint256 delegateVersion_ = delegateVersion[vault][delegate];\\n        return\\n            keccak256(\\n                abi.encode(\\n                    delegate,\\n                    vault,\\n                    contract_,\\n                    tokenId,\\n                    vaultVersion_,\\n                    delegateVersion_\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function revokeAllDelegates() external override {\\n        ++vaultVersion[msg.sender];\\n        emit IDelegationRegistry.RevokeAllDelegates(msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function revokeDelegate(address delegate) external override {\\n        _revokeDelegate(delegate, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function revokeSelf(address vault) external override {\\n        _revokeDelegate(msg.sender, vault);\\n    }\\n\\n    /**\\n     * @dev Revoke the `delegate` hotwallet from the `vault` coldwallet.\\n     */\\n    function _revokeDelegate(address delegate, address vault) internal {\\n        ++delegateVersion[vault][delegate];\\n        // For enumerations, filter in the view functions\\n        emit IDelegationRegistry.RevokeDelegate(vault, msg.sender);\\n    }\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getDelegationsByDelegate(\\n        address delegate\\n    ) external view returns (IDelegationRegistry.DelegationInfo[] memory info) {\\n        EnumerableSet.Bytes32Set\\n            storage potentialDelegationHashes = delegationHashes[delegate];\\n        uint256 potentialDelegationHashesLength = potentialDelegationHashes\\n            .length();\\n        uint256 delegationCount = 0;\\n        info = new IDelegationRegistry.DelegationInfo[](\\n            potentialDelegationHashesLength\\n        );\\n        for (uint256 i = 0; i < potentialDelegationHashesLength; ) {\\n            bytes32 delegateHash = potentialDelegationHashes.at(i);\\n            IDelegationRegistry.DelegationInfo\\n                memory delegationInfo_ = delegationInfo[delegateHash];\\n            address vault = delegationInfo_.vault;\\n            IDelegationRegistry.DelegationType type_ = delegationInfo_.type_;\\n            bool valid = false;\\n            if (type_ == IDelegationRegistry.DelegationType.ALL) {\\n                if (\\n                    delegateHash == _computeAllDelegationHash(vault, delegate)\\n                ) {\\n                    valid = true;\\n                }\\n            } else if (type_ == IDelegationRegistry.DelegationType.CONTRACT) {\\n                if (\\n                    delegateHash ==\\n                    _computeContractDelegationHash(\\n                        vault,\\n                        delegate,\\n                        delegationInfo_.contract_\\n                    )\\n                ) {\\n                    valid = true;\\n                }\\n            } else if (type_ == IDelegationRegistry.DelegationType.TOKEN) {\\n                if (\\n                    delegateHash ==\\n                    _computeTokenDelegationHash(\\n                        vault,\\n                        delegate,\\n                        delegationInfo_.contract_,\\n                        delegationInfo_.tokenId\\n                    )\\n                ) {\\n                    valid = true;\\n                }\\n            }\\n            if (valid) {\\n                info[delegationCount++] = delegationInfo_;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (potentialDelegationHashesLength > delegationCount) {\\n            assembly {\\n                let decrease := sub(\\n                    potentialDelegationHashesLength,\\n                    delegationCount\\n                )\\n                mstore(info, sub(mload(info), decrease))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getDelegatesForAll(\\n        address vault\\n    ) external view returns (address[] memory delegates) {\\n        return\\n            _getDelegatesForLevel(\\n                vault,\\n                IDelegationRegistry.DelegationType.ALL,\\n                address(0),\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getDelegatesForContract(\\n        address vault,\\n        address contract_\\n    ) external view override returns (address[] memory delegates) {\\n        return\\n            _getDelegatesForLevel(\\n                vault,\\n                IDelegationRegistry.DelegationType.CONTRACT,\\n                contract_,\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getDelegatesForToken(\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view override returns (address[] memory delegates) {\\n        return\\n            _getDelegatesForLevel(\\n                vault,\\n                IDelegationRegistry.DelegationType.TOKEN,\\n                contract_,\\n                tokenId\\n            );\\n    }\\n\\n    function _getDelegatesForLevel(\\n        address vault,\\n        IDelegationRegistry.DelegationType delegationType,\\n        address contract_,\\n        uint256 tokenId\\n    ) internal view returns (address[] memory delegates) {\\n        EnumerableSet.Bytes32Set storage delegationHashes_ = delegations[vault][\\n            vaultVersion[vault]\\n        ];\\n        uint256 potentialDelegatesLength = delegationHashes_.length();\\n        uint256 delegatesCount = 0;\\n        delegates = new address[](potentialDelegatesLength);\\n        for (uint256 i = 0; i < potentialDelegatesLength; ) {\\n            bytes32 delegationHash = delegationHashes_.at(i);\\n            DelegationInfo storage delegationInfo_ = delegationInfo[\\n                delegationHash\\n            ];\\n            if (delegationInfo_.type_ == delegationType) {\\n                if (delegationType == IDelegationRegistry.DelegationType.ALL) {\\n                    // check delegate version by validating the hash\\n                    if (\\n                        delegationHash ==\\n                        _computeAllDelegationHash(\\n                            vault,\\n                            delegationInfo_.delegate\\n                        )\\n                    ) {\\n                        delegates[delegatesCount++] = delegationInfo_.delegate;\\n                    }\\n                } else if (\\n                    delegationType ==\\n                    IDelegationRegistry.DelegationType.CONTRACT\\n                ) {\\n                    if (delegationInfo_.contract_ == contract_) {\\n                        // check delegate version by validating the hash\\n                        if (\\n                            delegationHash ==\\n                            _computeContractDelegationHash(\\n                                vault,\\n                                delegationInfo_.delegate,\\n                                contract_\\n                            )\\n                        ) {\\n                            delegates[delegatesCount++] = delegationInfo_\\n                                .delegate;\\n                        }\\n                    }\\n                } else if (\\n                    delegationType == IDelegationRegistry.DelegationType.TOKEN\\n                ) {\\n                    if (\\n                        delegationInfo_.contract_ == contract_ &&\\n                        delegationInfo_.tokenId == tokenId\\n                    ) {\\n                        // check delegate version by validating the hash\\n                        if (\\n                            delegationHash ==\\n                            _computeTokenDelegationHash(\\n                                vault,\\n                                delegationInfo_.delegate,\\n                                contract_,\\n                                tokenId\\n                            )\\n                        ) {\\n                            delegates[delegatesCount++] = delegationInfo_\\n                                .delegate;\\n                        }\\n                    }\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (potentialDelegatesLength > delegatesCount) {\\n            assembly {\\n                let decrease := sub(potentialDelegatesLength, delegatesCount)\\n                mstore(delegates, sub(mload(delegates), decrease))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getContractLevelDelegations(\\n        address vault\\n    )\\n        external\\n        view\\n        returns (\\n            IDelegationRegistry.ContractDelegation[] memory contractDelegations\\n        )\\n    {\\n        EnumerableSet.Bytes32Set storage delegationHashes_ = delegations[vault][\\n            vaultVersion[vault]\\n        ];\\n        uint256 potentialLength = delegationHashes_.length();\\n        uint256 delegationCount = 0;\\n        contractDelegations = new IDelegationRegistry.ContractDelegation[](\\n            potentialLength\\n        );\\n        for (uint256 i = 0; i < potentialLength; ) {\\n            bytes32 delegationHash = delegationHashes_.at(i);\\n            DelegationInfo storage delegationInfo_ = delegationInfo[\\n                delegationHash\\n            ];\\n            if (\\n                delegationInfo_.type_ ==\\n                IDelegationRegistry.DelegationType.CONTRACT\\n            ) {\\n                // check delegate version by validating the hash\\n                if (\\n                    delegationHash ==\\n                    _computeContractDelegationHash(\\n                        vault,\\n                        delegationInfo_.delegate,\\n                        delegationInfo_.contract_\\n                    )\\n                ) {\\n                    contractDelegations[delegationCount++] = IDelegationRegistry\\n                        .ContractDelegation({\\n                            contract_: delegationInfo_.contract_,\\n                            delegate: delegationInfo_.delegate\\n                        });\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (potentialLength > delegationCount) {\\n            assembly {\\n                let decrease := sub(potentialLength, delegationCount)\\n                mstore(\\n                    contractDelegations,\\n                    sub(mload(contractDelegations), decrease)\\n                )\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function getTokenLevelDelegations(\\n        address vault\\n    )\\n        external\\n        view\\n        returns (IDelegationRegistry.TokenDelegation[] memory tokenDelegations)\\n    {\\n        EnumerableSet.Bytes32Set storage delegationHashes_ = delegations[vault][\\n            vaultVersion[vault]\\n        ];\\n        uint256 potentialLength = delegationHashes_.length();\\n        uint256 delegationCount = 0;\\n        tokenDelegations = new IDelegationRegistry.TokenDelegation[](\\n            potentialLength\\n        );\\n        for (uint256 i = 0; i < potentialLength; ) {\\n            bytes32 delegationHash = delegationHashes_.at(i);\\n            DelegationInfo storage delegationInfo_ = delegationInfo[\\n                delegationHash\\n            ];\\n            if (\\n                delegationInfo_.type_ ==\\n                IDelegationRegistry.DelegationType.TOKEN\\n            ) {\\n                // check delegate version by validating the hash\\n                if (\\n                    delegationHash ==\\n                    _computeTokenDelegationHash(\\n                        vault,\\n                        delegationInfo_.delegate,\\n                        delegationInfo_.contract_,\\n                        delegationInfo_.tokenId\\n                    )\\n                ) {\\n                    tokenDelegations[delegationCount++] = IDelegationRegistry\\n                        .TokenDelegation({\\n                            contract_: delegationInfo_.contract_,\\n                            tokenId: delegationInfo_.tokenId,\\n                            delegate: delegationInfo_.delegate\\n                        });\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (potentialLength > delegationCount) {\\n            assembly {\\n                let decrease := sub(potentialLength, delegationCount)\\n                mstore(tokenDelegations, sub(mload(tokenDelegations), decrease))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function checkDelegateForAll(\\n        address delegate,\\n        address vault\\n    ) public view override returns (bool) {\\n        bytes32 delegateHash = keccak256(\\n            abi.encode(\\n                delegate,\\n                vault,\\n                vaultVersion[vault],\\n                delegateVersion[vault][delegate]\\n            )\\n        );\\n        return delegations[vault][vaultVersion[vault]].contains(delegateHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function checkDelegateForContract(\\n        address delegate,\\n        address vault,\\n        address contract_\\n    ) public view override returns (bool) {\\n        bytes32 delegateHash = keccak256(\\n            abi.encode(\\n                delegate,\\n                vault,\\n                contract_,\\n                vaultVersion[vault],\\n                delegateVersion[vault][delegate]\\n            )\\n        );\\n        return\\n            delegations[vault][vaultVersion[vault]].contains(delegateHash)\\n                ? true\\n                : checkDelegateForAll(delegate, vault);\\n    }\\n\\n    /**\\n     * @inheritdoc IDelegationRegistry\\n     */\\n    function checkDelegateForToken(\\n        address delegate,\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) public view override returns (bool) {\\n        bytes32 delegateHash = keccak256(\\n            abi.encode(\\n                delegate,\\n                vault,\\n                contract_,\\n                tokenId,\\n                vaultVersion[vault],\\n                delegateVersion[vault][delegate]\\n            )\\n        );\\n        return\\n            delegations[vault][vaultVersion[vault]].contains(delegateHash)\\n                ? true\\n                : checkDelegateForContract(delegate, vault, contract_);\\n    }\\n}\\n\",\"keccak256\":\"0xe3e3da3e0096165877a9fcbd9fc2bee74f2bcebc4777c56ad0473170d15b39da\",\"license\":\"CC0-1.0\"},\"contracts/IDelegationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n *      from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        bool value\\n    );\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(\\n        address vault,\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    );\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(\\n        address delegate,\\n        address contract_,\\n        bool value\\n    ) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(\\n        address delegate,\\n        address contract_,\\n        uint256 tokenId,\\n        bool value\\n    ) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(\\n        address delegate\\n    ) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(\\n        address vault\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(\\n        address vault,\\n        address contract_\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(\\n        address vault\\n    ) external view returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(\\n        address vault\\n    ) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(\\n        address delegate,\\n        address vault\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(\\n        address delegate,\\n        address vault,\\n        address contract_\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(\\n        address delegate,\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf16594798806700aa5f598bf9e286e61afdb9890eccfd989adae40c570512512\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063685ee3e811610097578063aba69cf811610066578063aba69cf8146102cf578063ed4b878e146102ff578063f956cf941461032f578063fa352c001461035f57610100565b8063685ee3e8146102235780636f007d871461023f57806390c9a2d01461026f5780639c395bc21461029f57610100565b806336137872116100d357806336137872146101b157806349c95d29146101bb5780634fc69282146101d7578063537a5c3d1461020757610100565b806301ffc9a7146101055780631221156b146101355780631b61f67514610165578063219044b014610195575b600080fd5b61011f600480360381019061011a919061251d565b61037b565b60405161012c9190612565565b60405180910390f35b61014f600480360381019061014a9190612614565b6103f5565b60405161015c9190612725565b60405180910390f35b61017f600480360381019061017a9190612747565b61040d565b60405161018c9190612725565b60405180910390f35b6101af60048036038101906101aa9190612747565b610424565b005b6101b9610431565b005b6101d560048036038101906101d091906127a0565b6104bd565b005b6101f160048036038101906101ec9190612747565b610520565b6040516101fe9190612990565b60405180910390f35b610221600480360381019061021c91906129b2565b6108a5565b005b61023d60048036038101906102389190612a19565b61090b565b005b61025960048036038101906102549190612747565b61096a565b6040516102669190612b4a565b60405180910390f35b61028960048036038101906102849190612b6c565b610c1e565b6040516102969190612565565b60405180910390f35b6102b960048036038101906102b49190612bbf565b610dcd565b6040516102c69190612565565b60405180910390f35b6102e960048036038101906102e49190612bff565b610f63565b6040516102f69190612565565b60405180910390f35b61031960048036038101906103149190612bbf565b611116565b6040516103269190612725565b60405180910390f35b61034960048036038101906103449190612747565b61112e565b6040516103569190612d44565b60405180910390f35b61037960048036038101906103749190612747565b6113d4565b005b60007f0596d3d5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ee57506103ed826113e1565b5b9050919050565b6060610404846003858561144b565b90509392505050565b606061041d82600160008061144b565b9050919050565b61042e3382611947565b50565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815461047d90612d95565b919050819055507f32d74befd0b842e19694e3e3af46263e18bcce41352c8b600ff0002b49edf662336040516104b39190612dec565b60405180910390a1565b60006104ca338585611a14565b90506104dd848284600233886000611b14565b7f8d6b2f5255b8d815cc368855b2251146e003bf4e2fcccaec66145fff5c174b4f338585856040516105129493929190612e07565b60405180910390a150505050565b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061057082611f56565b905060008167ffffffffffffffff81111561058e5761058d612e4c565b5b6040519080825280602002602001820160405280156105c757816020015b6105b46123aa565b8152602001906001900390816105ac5790505b50935060005b828110156108895760006105ea8286611f6b90919063ffffffff16565b90506000600460008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff1660038111156106315761063061281f565b5b60038111156106435761064261281f565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060008160200151905060008260000151905060006001600381111561077d5761077c61281f565b5b8260038111156107905761078f61281f565b5b036107af5761079f838c611f82565b85036107aa57600190505b610847565b600260038111156107c3576107c261281f565b5b8260038111156107d6576107d561281f565b5b036107fa576107ea838c8660600151611a14565b85036107f557600190505b610846565b60038081111561080d5761080c61281f565b5b8260038111156108205761081f61281f565b5b0361084557610839838c8660600151876080015161207f565b850361084457600190505b5b5b5b801561087957838a888061085a90612d95565b99508151811061086d5761086c612e7b565b5b60200260200101819052505b85600101955050505050506105cd565b508082111561089d57808203808551038552505b505050919050565b60006108b33386868661207f565b90506108c58582846003338989611b14565b7fe89c6ba1e8957285aed22618f52aa1dcb9d5bb64e1533d8b55136c72fcf5aa5d33868686866040516108fc959493929190612eb9565b60405180910390a15050505050565b60006109173384611f82565b905061092a838284600133600080611b14565b7f58781eab4a0743ab1c285a238be846a235f06cdb5b968030573a635e5f8c92fa33848460405161095d93929190612f0c565b60405180910390a1505050565b606060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002090506000610a0982611f56565b905060008167ffffffffffffffff811115610a2757610a26612e4c565b5b604051908082528060200260200182016040528015610a6057816020015b610a4d61242d565b815260200190600190039081610a455790505b50935060005b82811015610c02576000610a838286611f6b90919063ffffffff16565b90506000600460008381526020019081526020016000209050600380811115610aaf57610aae61281f565b5b8160000160009054906101000a900460ff166003811115610ad357610ad261281f565b5b03610bf557610b30888260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846003015461207f565b8203610bf45760405180606001604052808260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826003015481526020018260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250878580610bd590612d95565b965081518110610be857610be7612e7b565b5b60200260200101819052505b5b8260010192505050610a66565b5080821115610c1657808203808551038552505b505050919050565b600080848484600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001610cf5959493929190612f43565b604051602081830303815290604052805190602001209050610dad816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002061218290919063ffffffff16565b610dc057610dbb8585610dcd565b610dc3565b60015b9150509392505050565b6000808383600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001610ea29493929190612f96565b604051602081830303815290604052805190602001209050610f5a816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002061218290919063ffffffff16565b91505092915050565b60008085858585600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405160200161103c96959493929190612fdb565b6040516020818303038152906040528051906020012090506110f4816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002061218290919063ffffffff16565b61110857611103868686610c1e565b61110b565b60015b915050949350505050565b606061112683600284600061144b565b905092915050565b606060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905060006111cd82611f56565b905060008167ffffffffffffffff8111156111eb576111ea612e4c565b5b60405190808252806020026020018201604052801561122457816020015b61121161247a565b8152602001906001900390816112095790505b50935060005b828110156113b85760006112478286611f6b90919063ffffffff16565b90506000600460008381526020019081526020016000209050600260038111156112745761127361281f565b5b8160000160009054906101000a900460ff1660038111156112985761129761281f565b5b036113ab576112f0888260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a14565b82036113aa5760405180604001604052808260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525087858061138b90612d95565b96508151811061139e5761139d612e7b565b5b60200260200101819052505b5b826001019250505061122a565b50808211156113cc57808203808551038552505b505050919050565b6113de8133611947565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905060006114ea82611f56565b905060008167ffffffffffffffff81111561150857611507612e4c565b5b6040519080825280602002602001820160405280156115365781602001602082028036833780820191505090505b50935060005b828110156119285760006115598286611f6b90919063ffffffff16565b905060006004600083815260200190815260200160002090508960038111156115855761158461281f565b5b8160000160009054906101000a900460ff1660038111156115a9576115a861281f565b5b0361191b57600160038111156115c2576115c161281f565b5b8a60038111156115d5576115d461281f565b5b03611692576116088b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611f82565b820361168d578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687858061163f90612d95565b96508151811061165257611651612e7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b61191a565b600260038111156116a6576116a561281f565b5b8a60038111156116b9576116b861281f565b5b036117cf578873ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036117ca576117448b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b611a14565b82036117c9578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687858061177b90612d95565b96508151811061178e5761178d612e7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b611919565b6003808111156117e2576117e161281f565b5b8a60038111156117f5576117f461281f565b5b03611918578873ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561185c5750878160030154145b15611917576118918b8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8b61207f565b8203611916578060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168785806118c890612d95565b9650815181106118db576118da612e7b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b5b5b5b5b826001019250505061153c565b508082111561193c57808203808551038552505b505050949350505050565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546119d090612d95565b919050819055507f3e34a3ee53064fb79c0ee57448f03774a627a9270b0c41286efb7d8e32dcde938133604051611a0892919061303c565b60405180910390a15050565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508486858484604051602001611af3959493929190612f43565b60405160208183030381529060405280519060200120925050509392505050565b8415611db257611bba866000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002061219990919063ffffffff16565b50611c0c86600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061219990919063ffffffff16565b506040518060a00160405280856003811115611c2b57611c2a61281f565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152506004600088815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115611cc657611cc561281f565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030155905050611f4d565b611e52866000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206121b090919063ffffffff16565b50611ea486600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206121b090919063ffffffff16565b5060046000878152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905550505b50505050505050565b6000611f64826000016121c7565b9050919050565b6000611f7a83600001836121d8565b905092915050565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508385838360405160200161205f9493929190612f96565b604051602081830303815290604052805190602001209250505092915050565b600080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085878686858560405160200161216096959493929190612fdb565b6040516020818303038152906040528051906020012092505050949350505050565b60006121918360000183612203565b905092915050565b60006121a88360000183612226565b905092915050565b60006121bf8360000183612296565b905092915050565b600081600001805490509050919050565b60008260000182815481106121f0576121ef612e7b565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60006122328383612203565b61228b578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612290565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461239e5760006001826122c89190613065565b90506000600186600001805490506122e09190613065565b905081811461234f57600086600001828154811061230157612300612e7b565b5b906000526020600020015490508087600001848154811061232557612324612e7b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061236357612362613099565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506123a4565b60009150505b92915050565b6040518060a00160405280600060038111156123c9576123c861281f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124fa816124c5565b811461250557600080fd5b50565b600081359050612517816124f1565b92915050565b600060208284031215612533576125326124c0565b5b600061254184828501612508565b91505092915050565b60008115159050919050565b61255f8161254a565b82525050565b600060208201905061257a6000830184612556565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ab82612580565b9050919050565b6125bb816125a0565b81146125c657600080fd5b50565b6000813590506125d8816125b2565b92915050565b6000819050919050565b6125f1816125de565b81146125fc57600080fd5b50565b60008135905061260e816125e8565b92915050565b60008060006060848603121561262d5761262c6124c0565b5b600061263b868287016125c9565b935050602061264c868287016125c9565b925050604061265d868287016125ff565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61269c816125a0565b82525050565b60006126ae8383612693565b60208301905092915050565b6000602082019050919050565b60006126d282612667565b6126dc8185612672565b93506126e783612683565b8060005b838110156127185781516126ff88826126a2565b975061270a836126ba565b9250506001810190506126eb565b5085935050505092915050565b6000602082019050818103600083015261273f81846126c7565b905092915050565b60006020828403121561275d5761275c6124c0565b5b600061276b848285016125c9565b91505092915050565b61277d8161254a565b811461278857600080fd5b50565b60008135905061279a81612774565b92915050565b6000806000606084860312156127b9576127b86124c0565b5b60006127c7868287016125c9565b93505060206127d8868287016125c9565b92505060406127e98682870161278b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061285f5761285e61281f565b5b50565b60008190506128708261284e565b919050565b600061288082612862565b9050919050565b61289081612875565b82525050565b61289f816125de565b82525050565b60a0820160008201516128bb6000850182612887565b5060208201516128ce6020850182612693565b5060408201516128e16040850182612693565b5060608201516128f46060850182612693565b5060808201516129076080850182612896565b50505050565b600061291983836128a5565b60a08301905092915050565b6000602082019050919050565b600061293d826127f3565b61294781856127fe565b93506129528361280f565b8060005b8381101561298357815161296a888261290d565b975061297583612925565b925050600181019050612956565b5085935050505092915050565b600060208201905081810360008301526129aa8184612932565b905092915050565b600080600080608085870312156129cc576129cb6124c0565b5b60006129da878288016125c9565b94505060206129eb878288016125c9565b93505060406129fc878288016125ff565b9250506060612a0d8782880161278b565b91505092959194509250565b60008060408385031215612a3057612a2f6124c0565b5b6000612a3e858286016125c9565b9250506020612a4f8582860161278b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b606082016000820151612a9b6000850182612693565b506020820151612aae6020850182612896565b506040820151612ac16040850182612693565b50505050565b6000612ad38383612a85565b60608301905092915050565b6000602082019050919050565b6000612af782612a59565b612b018185612a64565b9350612b0c83612a75565b8060005b83811015612b3d578151612b248882612ac7565b9750612b2f83612adf565b925050600181019050612b10565b5085935050505092915050565b60006020820190508181036000830152612b648184612aec565b905092915050565b600080600060608486031215612b8557612b846124c0565b5b6000612b93868287016125c9565b9350506020612ba4868287016125c9565b9250506040612bb5868287016125c9565b9150509250925092565b60008060408385031215612bd657612bd56124c0565b5b6000612be4858286016125c9565b9250506020612bf5858286016125c9565b9150509250929050565b60008060008060808587031215612c1957612c186124c0565b5b6000612c27878288016125c9565b9450506020612c38878288016125c9565b9350506040612c49878288016125c9565b9250506060612c5a878288016125ff565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151612ca86000850182612693565b506020820151612cbb6020850182612693565b50505050565b6000612ccd8383612c92565b60408301905092915050565b6000602082019050919050565b6000612cf182612c66565b612cfb8185612c71565b9350612d0683612c82565b8060005b83811015612d37578151612d1e8882612cc1565b9750612d2983612cd9565b925050600181019050612d0a565b5085935050505092915050565b60006020820190508181036000830152612d5e8184612ce6565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612da0826125de565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612dd257612dd1612d66565b5b600182019050919050565b612de6816125a0565b82525050565b6000602082019050612e016000830184612ddd565b92915050565b6000608082019050612e1c6000830187612ddd565b612e296020830186612ddd565b612e366040830185612ddd565b612e436060830184612556565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b612eb3816125de565b82525050565b600060a082019050612ece6000830188612ddd565b612edb6020830187612ddd565b612ee86040830186612ddd565b612ef56060830185612eaa565b612f026080830184612556565b9695505050505050565b6000606082019050612f216000830186612ddd565b612f2e6020830185612ddd565b612f3b6040830184612556565b949350505050565b600060a082019050612f586000830188612ddd565b612f656020830187612ddd565b612f726040830186612ddd565b612f7f6060830185612eaa565b612f8c6080830184612eaa565b9695505050505050565b6000608082019050612fab6000830187612ddd565b612fb86020830186612ddd565b612fc56040830185612eaa565b612fd26060830184612eaa565b95945050505050565b600060c082019050612ff06000830189612ddd565b612ffd6020830188612ddd565b61300a6040830187612ddd565b6130176060830186612eaa565b6130246080830185612eaa565b61303160a0830184612eaa565b979650505050505050565b60006040820190506130516000830185612ddd565b61305e6020830184612ddd565b9392505050565b6000613070826125de565b915061307b836125de565b925082820390508181111561309357613092612d66565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ad8d2decc2dc8d51a02885c0a121fb19a095a3e3765add7a9a0d038f3c590e1764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "custom:coauthor": "foobar (0xfoobar)wwchung (manifoldxyz)purplehat (artblocks)ryley-o (artblocks)andy8052 (tessera)punk6529 (open metaverse)loopify (loopiverse)emiliano (nftrentals)arran (proof)james (collabland)john (gnosis safe)0xrusowsky",
    "custom:version": "1.0",
    "details": "See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations from here and integrate those permissions into their flow.",
    "kind": "dev",
    "methods": {
      "checkDelegateForAll(address,address)": {
        "params": {
          "delegate": "The hotwallet to act on your behalf",
          "vault": "The cold wallet who issued the delegation"
        }
      },
      "checkDelegateForContract(address,address,address)": {
        "params": {
          "contract_": "The address for the contract you're delegating",
          "delegate": "The hotwallet to act on your behalf",
          "vault": "The cold wallet who issued the delegation"
        }
      },
      "checkDelegateForToken(address,address,address,uint256)": {
        "params": {
          "contract_": "The address for the contract you're delegating",
          "delegate": "The hotwallet to act on your behalf",
          "tokenId": "The token id for the token you're delegating",
          "vault": "The cold wallet who issued the delegation"
        }
      },
      "delegateForAll(address,bool)": {
        "params": {
          "delegate": "The hotwallet to act on your behalf",
          "value": "Whether to enable or disable delegation for this address, true for setting and false for revoking"
        }
      },
      "delegateForContract(address,address,bool)": {
        "params": {
          "contract_": "The address for the contract you're delegating",
          "delegate": "The hotwallet to act on your behalf",
          "value": "Whether to enable or disable delegation for this address, true for setting and false for revoking"
        }
      },
      "delegateForToken(address,address,uint256,bool)": {
        "params": {
          "contract_": "The address for the contract you're delegating",
          "delegate": "The hotwallet to act on your behalf",
          "tokenId": "The token id for the token you're delegating",
          "value": "Whether to enable or disable delegation for this address, true for setting and false for revoking"
        }
      },
      "getContractLevelDelegations(address)": {
        "params": {
          "vault": "The cold wallet who issued the delegations"
        },
        "returns": {
          "contractDelegations": "Array of ContractDelegation structs"
        }
      },
      "getDelegatesForAll(address)": {
        "params": {
          "vault": "The cold wallet who issued the delegation"
        },
        "returns": {
          "delegates": "addresses Array of wallet-level delegates for a given vault"
        }
      },
      "getDelegatesForContract(address,address)": {
        "params": {
          "contract_": "The address for the contract you're delegating",
          "vault": "The cold wallet who issued the delegation"
        },
        "returns": {
          "delegates": "addresses Array of contract-level delegates for a given vault and contract"
        }
      },
      "getDelegatesForToken(address,address,uint256)": {
        "params": {
          "contract_": "The address for the contract holding the token",
          "tokenId": "The token id for the token you're delegating",
          "vault": "The cold wallet who issued the delegation"
        },
        "returns": {
          "delegates": "addresses Array of contract-level delegates for a given vault's token"
        }
      },
      "getDelegationsByDelegate(address)": {
        "params": {
          "delegate": "The delegate that you would like to retrieve delegations for"
        },
        "returns": {
          "info": "Array of DelegationInfo structs"
        }
      },
      "getTokenLevelDelegations(address)": {
        "params": {
          "vault": "The cold wallet who issued the delegations"
        },
        "returns": {
          "tokenDelegations": "Array of TokenDelegation structs"
        }
      },
      "revokeDelegate(address)": {
        "params": {
          "delegate": "The hotwallet to revoke"
        }
      },
      "revokeSelf(address)": {
        "params": {
          "vault": "The vault which delegated to the msg.sender, and should be removed"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "delegationHashes": {
        "details": "delegate -> delegationHashes"
      },
      "delegationInfo": {
        "details": "delegationHash -> DelegateInfo"
      },
      "delegations": {
        "details": "vault -> vaultVersion -> delegationHash"
      }
    },
    "title": "DelegationRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateForAll(address,address,bool)": {
        "notice": "Emitted when a user delegates their entire wallet"
      },
      "DelegateForContract(address,address,address,bool)": {
        "notice": "Emitted when a user delegates a specific contract"
      },
      "DelegateForToken(address,address,address,uint256,bool)": {
        "notice": "Emitted when a user delegates a specific token"
      },
      "RevokeAllDelegates(address)": {
        "notice": "Emitted when a user revokes all delegations"
      },
      "RevokeDelegate(address,address)": {
        "notice": "Emitted when a user revoes all delegations for a given delegate"
      }
    },
    "kind": "user",
    "methods": {
      "checkDelegateForAll(address,address)": {
        "notice": "Returns true if the address is delegated to act on the entire vault"
      },
      "checkDelegateForContract(address,address,address)": {
        "notice": "Returns true if the address is delegated to act on your behalf for a token contract or an entire vault"
      },
      "checkDelegateForToken(address,address,address,uint256)": {
        "notice": "Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault"
      },
      "delegateForAll(address,bool)": {
        "notice": "Allow the delegate to act on your behalf for all contracts"
      },
      "delegateForContract(address,address,bool)": {
        "notice": "Allow the delegate to act on your behalf for a specific contract"
      },
      "delegateForToken(address,address,uint256,bool)": {
        "notice": "Allow the delegate to act on your behalf for a specific token"
      },
      "getContractLevelDelegations(address)": {
        "notice": "Returns all contract-level delegations for a given vault"
      },
      "getDelegatesForAll(address)": {
        "notice": "Returns an array of wallet-level delegates for a given vault"
      },
      "getDelegatesForContract(address,address)": {
        "notice": "Returns an array of contract-level delegates for a given vault and contract"
      },
      "getDelegatesForToken(address,address,uint256)": {
        "notice": "Returns an array of contract-level delegates for a given vault's token"
      },
      "getDelegationsByDelegate(address)": {
        "notice": "Returns all active delegations a given delegate is able to claim on behalf of"
      },
      "getTokenLevelDelegations(address)": {
        "notice": "Returns all token-level delegations for a given vault"
      },
      "revokeAllDelegates()": {
        "notice": "Revoke all delegates"
      },
      "revokeDelegate(address)": {
        "notice": "Revoke a specific delegate for all their permissions"
      },
      "revokeSelf(address)": {
        "notice": "Remove yourself as a delegate for a specific vault"
      }
    },
    "notice": "An immutable registry contract to be deployed as a standalone primitive.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3631,
        "contract": "contracts/Delegator.sol:DelegationRegistry",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2925_storage))"
      },
      {
        "astId": 3636,
        "contract": "contracts/Delegator.sol:DelegationRegistry",
        "label": "vaultVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3643,
        "contract": "contracts/Delegator.sol:DelegationRegistry",
        "label": "delegateVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3649,
        "contract": "contracts/Delegator.sol:DelegationRegistry",
        "label": "delegationHashes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)2925_storage)"
      },
      {
        "astId": 3655,
        "contract": "contracts/Delegator.sol:DelegationRegistry",
        "label": "delegationInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(DelegationInfo)4929_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DelegationType)4917": {
        "encoding": "inplace",
        "label": "enum IDelegationRegistry.DelegationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bytes32Set)2925_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct EnumerableSet.Bytes32Set))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bytes32Set)2925_storage)"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)2925_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)2925_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(DelegationInfo)4929_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IDelegationRegistry.DelegationInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DelegationInfo)4929_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bytes32Set)2925_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)2925_storage"
      },
      "t_struct(Bytes32Set)2925_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2924,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2731_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DelegationInfo)4929_storage": {
        "encoding": "inplace",
        "label": "struct IDelegationRegistry.DelegationInfo",
        "members": [
          {
            "astId": 4920,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "type_",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(DelegationType)4917"
          },
          {
            "astId": 4922,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "vault",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4924,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "delegate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4926,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "contract_",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4928,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)2731_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2726,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2730,
            "contract": "contracts/Delegator.sol:DelegationRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}